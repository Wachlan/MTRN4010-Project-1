
% AAS-mtrn4010. 2020.T1.  Useful code for Project01. parts A and B.

% Example program, for processing laser scans, stored in a Matlab data file.
% It shows the scans in the original/native way :POLAR.
% You are requested to modify this program to show the data in Cartesian.


% The data correspond to a laser scanner  (LIDAR) installed at the front of our UGV
% (robot). It is pointing ahead the robot, scanning horizontally, i.e. in 2D
% When you plot the data in Cartesian you will see how the room did look
% from the perspective of the moving platform.


function ExampleUseLaserData2(file)
global ABCD;            % I use a global variable, to easily share it, in many functions. You may obtain similar functionality using other ways.

ABCD.X = 0;
ABCD.Y = 0;
ABCD.string = 'hi';

ABCD.flagPause = 0;
ABCD.stop = 0;

global Vehicle;
global begin;
begin = 1;

% In case the caller does not specify the input argument, we propose a
% default one, assumed to be in the same folder where we run this example from.
if ~exist('file','var'), file ='Laser__2.mat'; end;

load(file); 
% now, after loading, the data is in a variable named "dataL";

ProcessIMU();
% DeadReckoning(IMUData, SpeedData);

    % Create graphical object for refreshing data during program execution.
    figure(1) ; clf(); 
    
    MyGUIHandles.handle1 = plot(0,0,'b.');      % to be used for showing the laser points
    axis([0,180,0,20]);                         % focuses the plot on this region (of interest, close to the robot)
    xlabel('angle (degrees)');
    ylabel('range (meters)');
    
    MyGUIHandles.handle2 = title('');           % create an empty title..
    zoom on ;  grid on;
    
    fprintf('\nThere are [ %d ] laser scans in this dataset (file [%s])\n',dataL.N,file);
    
    uicontrol('Style','pushbutton','String','Pause/Cont.','Position',[10,1,80,20],'Callback',{@MyCallBackA,1});
    uicontrol('Style','pushbutton','String','END Now','Position',[90,1,80,20],'Callback',{@MyCallBackA,2});

   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    figure(2) ; clf();
    hold on;
    MyGUIHandles.handle3 = plot(0,0,'b.');      % to be used for showing the laser points
    MyGUIHandles.handle4 = plot(0,0,'+r');      % to be used for showing the laser points
    MyGUIHandles.handle5 = plot(0,0,'g+');      % to be used for showing the laser points
    
    axis([-10,10,0,20]);                         % focuses the plot on this region (of interest, close to the robot)
    xlabel('X (m)');
    ylabel('Y (m)');
    % Now, loop through the avaialable scans..
    
    uicontrol('Style','pushbutton','String','Pause/Cont.','Position',[10,1,80,20],'Callback',{@MyCallBackA,1});
    uicontrol('Style','pushbutton','String','END Now','Position',[90,1,80,20],'Callback',{@MyCallBackA,2});
    hold off;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    figure(3) ; clf();
    hold on;
    MyGUIHandles.handle6 = quiver(0,0,0,0.46);
    MyGUIHandles.handle7 = plot(0,0,'*r');      % to be used for showing the real location of OOIs
    MyGUIHandles.handle8 = plot(0,0,'g+');      % to be used for showing estimated OOIs in real time
    MyGUIHandles.handle9 = gca;                  %handle for  axis
    
    
    axis([-5,5,-2,8]);                      % focuses the plot on this region (of interest, close to the robot)
    xlabel('X (m)');
    ylabel('Y (m)');
    title('Global view');
    legend('Vehicle position','Real OOI positions','Estimated OOI positions');
    
    uicontrol('Style','pushbutton','String','Pause/Cont.','Position',[10,1,80,20],'Callback',{@MyCallBackA,1});
    uicontrol('Style','pushbutton','String','END Now','Position',[90,1,80,20],'Callback',{@MyCallBackA,2});
    hold off;
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
global IMUTime
matchingTime = [];
matchingTimeLaser = [];
LaserTime =  double(dataL.times(:)-dataL.times(1))/10000;

for i = 1:dataL.N
    %find the indices within IMUTime which also exist for the laser
    match = find(IMUTime == LaserTime(i));
    matchingTime = [matchingTime  match];
    
    if match ~= 0
        matchingTimeLaser = [matchingTimeLaser i];
    end
end


N = dataL.N; 
i=1;
while ABCD.stop ~= 1 && i < length(matchingTimeLaser)
    
    if (ABCD.flagPause), pause(0.2) ; continue ; end;
        
    % Native time expressed via uint32 numbers, where 1 unint means
    % [1/10,000]second (i.e. 0.1 millisecond)
    % (BTW: we do not use the time, in this task)
    t =  double(dataL.times(i)-dataL.times(1))/10000;
    % t: time expressed in seconds, relative to the time of the first scan.
    
    scan_i = dataL.Scans(:,matchingTimeLaser(i));
    MyProcessingOfScan(scan_i,t,MyGUIHandles,i,matchingTime);   % some function to use the data...
    
    pause(0.05) ;  % wait for ~10ms (approx.)
    i=i+1;
end;

fprintf('\nDONE!\n');


return;
end
%-----------------------------------------
function MyProcessingOfScan(scan,t,mh,i,matchingTime)
    %matchingTime is the array indices of the IMU which matches up with the
    %laser data

    % I made this function, to receive the following parameters/variables:
    % 'scan' : scan measurements to be shown.
    % 't':  associated time.    
    % 'i' : scan number.
    % 'mh'  : struct contaning handles of necessary graphical objects.
    
    angles = [0:360]'*0.5 ;         % Associated angle for each range of scan
    % same as in "dataL.angles".
    
    % scan data is provided as a array of class uint16, which encodes range
    % and intensity (that is the way the sensor provides the data, in that
    % mode of operation)
     
    MaskLow13Bits = uint16(2^13-1); % mask for extracting the range bits.
    % the lower 13 bits are for indicating the range data (as provided by this sensor)
    
    rangesA = bitand(scan,MaskLow13Bits) ; 
    % rangesA now contains the range data of the scan, expressed in CM, having uint16 format.
    
    % now I convert ranges to meters, and also to floating point format
    ranges    = 0.01*double(rangesA); 
    
    %Mask to extract intensity
    maskE000 = bitshift(uint16(7),13)  ;

    intensities = bitand(scan,maskE000);
    ii = find(intensities~=0);          % find those "pixels" that had intense reflection (>0)

    
    % 2D points, expressed in Cartesian. From the sensor's perpective.
    x = cosd(angles).*ranges;
    y = sind(angles).*ranges; 
    
    %Extract OOIs
    OOIs = ExtractOOIs(ranges,intensities);
    global Vehicle;
    global begin;
    global FirstCentres;
    
    % and then refresh the data in the plots...
    set(mh.handle1,'xdata',angles,'ydata',ranges);
    set(mh.handle3,'xdata',x,'ydata',y);
    set(mh.handle4,'xdata',x(ii),'ydata',y(ii));
    
    if OOIs.N > 0 %Plot the OOIs if they are in view
        set(mh.handle5,'xdata',OOIs.Centres(:,1),'ydata',OOIs.Centres(:,2));
    else
        set(mh.handle5,'xdata',[],'ydata',[]);
    end
    
    MatchingIndex = matchingTime(i);
    if OOIs.N > 0  
          for i = 1:1:OOIs.N
            xb = (OOIs.Centres(i,1));
            yb = (OOIs.Centres(i,2));
            rotationMatrix = [cos(Vehicle.Heading(1,MatchingIndex)-pi/2) -sin(Vehicle.Heading(1,MatchingIndex)-pi/2); sin(Vehicle.Heading(1,MatchingIndex)-pi/2) cos(Vehicle.Heading(1,MatchingIndex)-pi/2)];
            EstimatedCentres(i,:) = rotationMatrix*[xb;yb] + [Vehicle.X(1,MatchingIndex);Vehicle.Y(1,MatchingIndex)];
          end
    else
        EstimatedCentres = [];
    end
     
    %plot the vehicle as a quiver
    set(mh.handle6,'xdata',Vehicle.X(MatchingIndex),'ydata',Vehicle.Y(MatchingIndex),'udata',0.46*cos(Vehicle.Heading(1,MatchingIndex)),'vdata',0.46*sin(Vehicle.Heading(1,MatchingIndex)),'MaxHeadSize',2);
    set(mh.handle7,'xdata',FirstCentres(:,1),'ydata',FirstCentres(:,2));
    if OOIs.N > 0
        set(mh.handle8,'xdata',EstimatedCentres(:,1),'ydata',EstimatedCentres(:,2));
    else
        set(mh.handle8,'xdata',[],'ydata',[]);
    end
    
    OOICentres = AssignIdentity();
    OOIPositionLabel = [0 0];
    OOINameLabel = " ";
    [ColumnLength,~] = size(EstimatedCentres);
    for i = 1:1:ColumnLength
        distVector = FindDistance(EstimatedCentres(i,1),EstimatedCentres(i,2),OOICentres.Position(:,1),OOICentres.Position(:,2)) < 0.4;
        identity = find(distVector);
        OOIPositionLabel = [OOIPositionLabel ; EstimatedCentres(i,1) EstimatedCentres(i,2)];
        OOINameLabel = [OOINameLabel; num2str(identity)]; 
    end
          global OOIname;
          delete(OOIname);
          OOIname = text(mh.handle9, OOIPositionLabel(:,1)',OOIPositionLabel(:,2)',OOINameLabel(:)');      
    
    
    % and some text...
    s= sprintf('Laser scan # [%d] at time [%.3f] secs',i,t);
    set(mh.handle2,'string',s);
    return;
end
% ---------------------------------------
% Callback function. I defined it, and associated it to certain GUI button,
function MyCallBackA(~,~,x)   
    global ABCD;
        
    if (x==1)
       ABCD.flagPause = ~ABCD.flagPause; %Switch ON->OFF->ON -> and so on.
       return;
    end;
    if (x==2)
        ABCD.stop = 1;
        return;
    end;
    return;    
end

function r = ExtractOOIs(ranges,intensities)
    global begin;
    global FirstCentres;
    
    r.N = 0;
    r.Colours = []; %will always be coloured (1)
    r.Centers = [];
    r.Diameters = [];
    
    cluster = [];
    cnt = 1;
    intense = 0;
    OOIcnt = 1;
    i = 1;
    
    %Look for clusters of ranges, then look for intense point
    while i <= 361
        
        while i <= 360 && abs(ranges(i+1,1) - ranges(i,1)) < 0.1
            if intensities(i) ~= 0
                intense = 1;
            end
            cluster(cnt) = ranges(i);
            cnt = cnt + 1;
            i = i + 1;
        end
        
        if intense == 1
            diameter = FindDiameter(cluster);
            if diameter >= 0.05 && diameter <= 0.20
                %we have an object of interest
                r.N = r.N + 1;
                r.Diameters(OOIcnt,1) = diameter;
                centre = FindCentre(cluster, i);
                r.Centres(OOIcnt,1) = centre(1);
                r.Centres(OOIcnt,2) = centre(2);
                
                %Update parameters
                OOIcnt = OOIcnt + 1;
            end
        end
        
        cnt = 1;
        cluster = [];
        intense = 0;
        diameter = 0;
        i = i + 1;
    end
    if begin == 1
        FirstCentres = r.Centres;
        begin = 0;
    end
return;
end

function OOICentres = AssignIdentity()
    global FirstCentres;
    OOICentres.Position = [];
    OOICentres.Identity = [];
    OOICentres.Position = FirstCentres;
    
    for i = 1:length(FirstCentres)
        OOICentres.Identity(i,1) = i;
    end
end

function distance = FindDistance(x1,y1,x2,y2)
    distance = sqrt((x2-x1).^2+(y2-y1).^2);
end

function diameter = FindDiameter(cluster)
    %theta = angle from first range to center
    theta = (length(cluster) - 1)/4;
    radius = cluster(1)*tand(theta);
    diameter = 2 * radius;
end

function centre = FindCentre(cluster, i)
    %theta = angle to 'radius' of the circle
    theta = (length(cluster) - 1)/4;
    
    %distance from origin to the centre of the circle = centreRange
    centreRange = cluster(1)/cosd(theta);
    
    %find the angle from the x axis to the middle line
    angle = i*0.5 - theta;
    
    %convert distance and angle to cartesian co-ordinates
    centre(1) = cosd(angle)*centreRange;
    centre(2) = sind(angle)*centreRange;
end

function ProcessIMU()
    global Vehicle;
    global IMUTime;
    
    file ='IMU_dataC.mat';
    IMU = importdata(file);
    
    file ='Speed_dataC.mat';
    Speed = importdata(file);

    IMUTime = double(IMU.times(:)-IMU.times(1))/10000;
    
    N = IMU.N;
    time = 1:1:N;
    times = IMU.times;
    YawAngular = IMU.DATAf(6,:);
    AngleCorrected(1) = pi/2;
    Angle(1) = pi/2;
    bias = mean(YawAngular(1:400));  

    for i = 1:(N-1)
        AngleCorrected(i+1) = AngleCorrected(i) + (YawAngular(i)-bias) * 0.005;
        Angle(i+1) = Angle(i) + (YawAngular(i)) * 0.005;
    end
    
    Vehicle.Heading = AngleCorrected(1,:);
    
    figure(4)
    hold on;
    xlabel('Scan Number');
    ylabel('Attitude (degrees)');
    title('Estimated and Corrected Attitude vs Scan');
    plot(time,rad2deg(AngleCorrected),'b');
    plot(time,rad2deg(Angle),'r')
    legend('corrected','biased');
    hold off;
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    Vel = Speed.speeds;
    SpeedX = Vel .*cos(AngleCorrected);
    SpeedY = Vel .*sin(AngleCorrected);
    Vehicle.X = zeros(1,IMU.N);
    Vehicle.Y = zeros(1,IMU.N);
    
    for i = 1:1:IMU.N
        Vehicle.X(i+1) = Vehicle.X(i) + 0.005*SpeedX(i);
        Vehicle.Y(i+1) = Vehicle.Y(i) + 0.005*SpeedY(i);
    end
    
    figure(5)
    hold on
    xlabel('X (m)');
    ylabel('Y (m)');
    title('Vehicle Path');
    plot(Vehicle.X,Vehicle.Y);
    hold off
return;
end

 
% The data in the file is stored according to certain structure. 
% The fields we need are: "Scans" and "times".
% The number of scans is indicated by the field "N".
% The scans themselves are stored in the field "Scans", that is a matrix of 361 x N 
% (because each scan contains 361 measurements, which cover 180 degrees at steps of 1/2 degree).
% the ranges are originally expressed in Centimeters, as 13 bits unsigned int integers.
% as explained in the code.

